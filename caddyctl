#!/bin/bash

CADDY_DIR="caddy"
SERVICES_DIR="services"
STARTPAGE_DIR="services/landingpage/www"


## functions

function start(){
  docker network create --driver=bridge caddy_backend

  echo "create and start frontend proxy"
  docker-compose up -d
}

function stop(){
  echo "stop and remove frontend proxy"
  docker-compose down --volumes --rmi local

  docker network rm caddy_backend
}

function restart(){
  echo "restart frontend proxy"
  docker-compose down -v
  docker-compose up -d
}

function reload(){
  echo "reload frontend proxy"
  docker-compose restart caddy
}

function cleanup(){
  echo "remove dangling images"
  docker rmi $(docker images --quiet --filter dangling=true)

  echo "remove dangling volumes"
  docker volume rm $(docker volume ls --quiet --filter dangling=true)
}

function makeindex(){
  local newjson=""
  for i in ${CADDY_DIR}/conf/enabled/*; do
    if [[ -z ${newjson} ]]; then
      newjson="["
    else
      newjson=${newjson}","
    fi
    local link=$(head -n 1 ${CADDY_DIR}/conf/enabled/$i | cut -d' ' -f1)
    local example="{\"name\": \"$i\",\"link\": \"http://$link\",\"button\": \"btn-primary\",\"image\": \"empty\"}"
    newjson=${newjson}${example}
  done
  newjson=${newjson}"]"

  echo ${newjson} | jq '.' > "${STARTPAGE_DIR}/caddy.json"
  echo -e "Index created\nPlease open \e[34m'/caddy.html'\e[39m in your browser."
}

function buildme(){
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" build
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" pull
}

function logme(){
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" logs -f
}

function caddylog(){
  docker-compose logs -f
}

function vhostlog(){
  multitail "${CADDY_DIR}/logs/*"
}

function enableme(){
  ln -sr "${CADDY_DIR}/conf/available/${SERVICE}" "${CADDY_DIR}/conf/enabled/"
  docker-compose restart caddy
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" up -d
}

function disableme(){
  rm -f "${CADDY_DIR}/conf/enabled/${SERVICE}"
  docker-compose restart caddy
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" down -v
}

function listme(){
  echo -e "\n\e[34mdocker apps\e[39m"
  ls -1 "${SERVICES_DIR}/"

  echo -e "\n\e[34mavailable\e[39m"
  ls -1 "${CADDY_DIR}/conf/available/"

  echo -e "\n\e[34menabled\e[39m"
  ls -1 "${CADDY_DIR}/conf/enabled/"
  echo -e "\n\n"
}

function psme(){
  cmd='docker ps --format="table{{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Names}}" -a '
  filterlist="${CADDY_DIR}/conf/enabled/*"
  eval $cmd | head -n 1
  for item in $filterlist; do
    eval $cmd | grep "$(basename $item)"
  done
}

function sethome(){
  grep -rn "domain.tld" "${CADDY_DIR}/conf"
  if [[ -n "${SERVICE}" ]]; then
    find "${CADDY_DIR}/conf/available" -type f -exec sed -i -e "s/\.domain\.tld/\.${SERVICE}/g" {} \;
  fi
}

function usage () {
cat << EOM
usage:

  caddyctl start              Start the Caddy server.

  caddyctl stop               Stop the Caddy server.

  caddyctl restart            Restart the Caddy server. (recreate caddy container)

  caddyctl reload             Reload the Caddy server config (restart caddy container).

  caddyctl caddylog           Log from the Caddy server.

  caddyctl vhostlog           Log from the Caddy server vhosts.

  caddyctl logs <service>     Logs of a service. (run docker-compose logs -f)

  caddyctl enable  <service>  Enable a service. (add settings to caddy; run docker-compose up)

  caddyctl disable <service>  Disable a service. (remove settings from caddy; run docker-compose down)

  caddyctl prepare <service>  Build / Pull Docker Image(s) of a service. (run docker-compose build and docker-compose pull)

  caddyctl ps                 Get status of all connected Container.

  caddyctl list               List all Services (Docker Applications).

  caddyctl index              Create index page for active Services available at '/caddy.html'.

  caddyctl sethome <fqdn>     Set FQDN for all vhosts. (e.g.: <domain.tld>)

  caddyctl cleanup            Remove all dangling Docker resources.

EOM
}

function evaluate_result(){
  local returnvalue="${1}"
  local message="${2}"
  if [ "$returnvalue" -eq 0 ]; then
    echo -e "\e[32m  [PASS] ${message}\e[0m"
  else
    echo -e "\e[31m  [FAIL] ${message}\e[0m"
    ERROR=1
  fi
}

function check_if_program_exists(){
  cmd="${1}"
  command -v $cmd >/dev/null 2>&1
  evaluate_result $? "$cmd is installed"
}

ERROR=0
check_if_program_exists jq
check_if_program_exists multitail

if [[ $ERROR -gt 0 ]]; then
  exit 1
fi

mkdir -p "${CADDY_DIR}/logs" >/dev/null 2>&1

if [[ $DEBUG == "true" ]]; then
  echo "$@"
  eval "$@"
#  exec "$@"
elif [ $# -eq 1 ]; then
SERVICE="${2}"
  case "$1" in
    "start" )
      start
      ;;
    "stop" )
      stop
      ;;
    "restart" )
      restart
      ;;
    "reload" )
      reload
      ;;
    "caddylog" )
      caddylog
      ;;
    "vhostlog" )
      vhostlog
      ;;
    "cleanup" )
      cleanup
      ;;
    "ps" )
      psme
      ;;
    "list" )
      listme
      ;;
    "index" )
      makeindex
      ;;
    * )
      usage
      ;;
  esac
elif [ $# -eq 2 ]; then
SERVICE="${2}"
#if [[ "${SERVICE}" != "landingpage" ]]; then
  case "$1" in
    "enable" )
      enableme
      ;;
    "disable" )
      disableme
      ;;
    "prepare" )
      buildme
      ;;
    "logs" )
      logme
      ;;
    "sethome" )
      sethome
      ;;
    * )
      usage
      ;;
  esac
#fi
else
  usage
fi
