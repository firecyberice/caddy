#!/bin/bash

CADDY_DIR="caddy"
SERVICES_DIR="services"
STARTPAGE_DIR="services/landingpage/www"


## functions

function start(){
  docker network create --driver=bridge caddy_backend

  echo "create and start frontend proxy"
  docker-compose up -d
}

function stop(){
  echo "stop and remove frontend proxy"
  docker-compose down --volumes --rmi local

  docker network rm caddy_backend
}

function restart(){
  echo "restart frontend proxy"
  docker-compose down -v
  docker-compose up -d
}

function reload(){
  echo "reload frontend proxy"
  docker-compose restart caddy
}

function cleanup(){
  echo "remove dangling images"
  docker rmi $(docker images --quiet --filter dangling=true)

  echo "remove dangling volumes"
  docker volume rm $(docker volume ls --quiet --filter dangling=true)
}

function makeindex(){
  local newjson=""
  find ${CADDY_DIR}/conf/enabled -type f -name '*~' -delete
  for j in ${CADDY_DIR}/conf/enabled/*; do
    if [[ -z ${newjson} ]]; then
      newjson="["
    else
      newjson=${newjson}","
    fi
    i=$(basename $j)
    local link=$(head -n 1 ${CADDY_DIR}/conf/enabled/$i | cut -d' ' -f1)
    local example="{\"name\": \"$i\",\"link\": \"http://$link\",\"button\": \"btn-primary\",\"image\": \"empty\"}"
    newjson=${newjson}${example}
  done
  newjson=${newjson}"]"

  echo ${newjson} | jq '.' > "${STARTPAGE_DIR}/caddy.json"
  echo -e "Index created\nPlease open \e[34m'/caddy.html'\e[39m in your browser."
}

function buildme(){
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" build
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" pull
}

function logme(){
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" logs -f
}

function caddylog(){
  docker-compose logs -f
}

function vhostlog(){
  local logdir="${CADDY_DIR}/logs/*"
  multitail $logdir
}

function enableme(){
  ln -sr "${CADDY_DIR}/conf/available/${SERVICE}" "${CADDY_DIR}/conf/enabled/"
  docker-compose restart caddy
  test -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" && \
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" up -d
}

function disableme(){
  rm -f "${CADDY_DIR}/conf/enabled/${SERVICE}"
  docker-compose restart caddy
  test -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" && \
  docker-compose -f "${SERVICES_DIR}/${SERVICE}/docker-compose.yml" down -v
}

function upme(){
  for j in ${CADDY_DIR}/conf/enabled/*; do
    local sname=$(basename $j)
    test -f "${SERVICES_DIR}/${sname}/docker-compose.yml" && \
    docker-compose -f "${SERVICES_DIR}/${sname}/docker-compose.yml" up -d
  done
}

function downme(){
  for j in ${CADDY_DIR}/conf/enabled/*; do
    local sname=$(basename $j)
    test -f "${SERVICES_DIR}/${sname}/docker-compose.yml" && \
    docker-compose -f "${SERVICES_DIR}/${sname}/docker-compose.yml" down -v
  done
  echo "archive logfiles"
  local DATE=$(date +"%Y%m%d-%H%M%S")
  tar czf "${CADDY_DIR}/logs_${DATE}.tar.gz" "${CADDY_DIR}/logs"
  rm -rf "${CADDY_DIR}/logs/*"
}

function listme(){
  echo -e "\n\e[34mdocker apps\e[39m"
  ls -1 "${SERVICES_DIR}/"

  find ${CADDY_DIR}/conf/ -type f -name '*~' -delete
  echo -e "\n\e[34mavailable\e[39m"
  ls -1 "${CADDY_DIR}/conf/available/"

  echo -e "\n\e[34menabled\e[39m"
  ls -1 "${CADDY_DIR}/conf/enabled/"
  echo -e "\n\n"
}

function psme(){
  cmd='docker ps --format="table{{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Names}}" -a '
  filterlist="${CADDY_DIR}/conf/enabled/*"
  eval $cmd | head -n 1
  eval $cmd | grep "caddy"
  for item in $filterlist; do
    eval $cmd | grep "_$(basename $item)_"
  done
}

function sethome(){
  grep -rn "domain.tld" "${CADDY_DIR}/conf"
  if [[ -n "${SERVICE}" ]]; then
    find "${CADDY_DIR}/conf/available" -type f -exec sed -i -e "s/\.domain\.tld/\.${SERVICE}/g" {} \;
  fi
}

function setmail(){
  TLD="$(head -n 1 "${CADDY_DIR}/conf/available/landingpage" |cut -d: -f1 |cut -d' ' -f1 |cut -d. -f2-)"
  grep -rn "noreply@domain.tld" "${CADDY_DIR}/conf"
  grep -rn "noreply@${TLD}" "${CADDY_DIR}/conf"
  if [[ -n "${SERVICE}" ]]; then
    find "${CADDY_DIR}/conf/available" -type f -exec sed -i -e "s/noreply@\.domain\.tld/${SERVICE}/g" -e "s/noreply@${TLD}/${SERVICE}/g" {} \;
  fi
}

function newservice(){
  TLD="$(head -n 1 "${CADDY_DIR}/conf/available/landingpage" |cut -d: -f1 |cut -d' ' -f1 |cut -d. -f2-)"

  echo "create caddy vhost"
cat <<EOM > ${CADDY_DIR}/conf/available/${SERVICE}
${SERVICE}.${TLD}:80 {
  tls off
# add this if you like to enable tls
#  tls noreply@example.com
  log / /root/.caddy/logs/${SERVICE}.log "{proto} Request: {method} {path} ... {scheme} {host} {remote}"
  root /root/.caddy/startpage/
  errors {
    403 403.html # Forbidden
    404 404.html # Not Found
    500 500.html # Internal Server Error
    502 502.html # Bad Gateway
    503 503.html # Service Unavailable
    504 504.html # Gateway Time-out
}
  proxy / http://${SERVICE}:80/ {
    proxy_header Host {host}
    proxy_header X-Real-IP {remote}
    proxy_header X-Forwarded-Proto {scheme}
  }
}
EOM

  mkdir -p ${SERVICES_DIR}/${SERVICE}/docker/
  echo "create docker-compose.yml"
cat <<EOM > ${SERVICES_DIR}/${SERVICE}/docker-compose.yml
version: '2'
networks:
  backend:
    external:
      name: caddy_backend

services:
  ${SERVICE}:
    networks:
      - backend
    hostname: ${SERVICE}.${TLD}
    expose:
      - 80
    image: ${SERVICE}
    build:
      context: ./docker/
      dockerfile: Dockerfile
EOM

echo "create example Dockerfile"
echo "Hello ${SERVICE}" > ${SERVICES_DIR}/${SERVICE}/docker/index.html
cat <<EOM > ${SERVICES_DIR}/${SERVICE}/docker/Dockerfile
FROM busybox
WORKDIR /www
COPY index.html /www/index.html
EXPOSE 80
ENTRYPOINT ["httpd"]
CMD ["-f","-v","-p","80","-h", "/www"]
EOM
}

function usage () {
cat << EOM
usage:

  caddyctl start              Start the Caddy server.

  caddyctl stop               Stop the Caddy server.

  caddyctl up                 Create and start all service container

  caddyctl down               Stop and remove all service container

  caddyctl restart            Restart the Caddy server. (recreate caddy container)

  caddyctl reload             Reload the Caddy server config (restart caddy container).

  caddyctl caddylog           Log from the Caddy server.

  caddyctl vhostlog           Log from the Caddy server vhosts.

  caddyctl logs <service>     Logs of a service. (run docker-compose logs -f)

  caddyctl enable  <service>  Enable a service. (add settings to caddy; run docker-compose up)

  caddyctl disable <service>  Disable a service. (remove settings from caddy; run docker-compose down)

  caddyctl new <service>      Create new service template. (caddy conf and docker-compose.yml)

  caddyctl prepare <service>  Build / Pull Docker Image(s) of a service. (run docker-compose build and docker-compose pull)

  caddyctl ps                 Get status of all connected Container.

  caddyctl list               List all Services (Docker Applications).

  caddyctl index              Create index page for active Services available at '/caddy.html'.

  caddyctl sethome <fqdn>     Set FQDN for all vhosts. (e.g.: <domain.tld>)

  caddyctl setmail <email>    Set email address for tls with letsencrypt.

  caddyctl cleanup            Remove all dangling Docker resources.

EOM
}

function evaluate_result(){
  local returnvalue="${1}"
  local message="${2}"
  if [ "$returnvalue" -eq 0 ]; then
    echo -e "\e[32m  [PASS] ${message}\e[0m"
  else
    echo -e "\e[31m  [FAIL] ${message}\e[0m"
    ERROR=1
  fi
}

function check_if_program_exists(){
  cmd="${1}"
  command -v $cmd >/dev/null 2>&1
  evaluate_result $? "$cmd is installed"
}

function test_requirements(){
  prog="${1}"
  ERROR=0
  check_if_program_exists "${prog}"
  if [[ $ERROR -gt 0 ]]; then
    exit 1
  fi
}

echo "Check requirements without exiting"
check_if_program_exists jq
check_if_program_exists multitail


mkdir -p "${CADDY_DIR}/logs" >/dev/null 2>&1

if [[ $DEBUG == "true" ]]; then
  echo "$@"
  eval "$@"
#  exec "$@"
elif [ $# -eq 1 ]; then
SERVICE="${2}"
  case "$1" in
    "start" )
      start
      ;;
    "stop" )
      stop
      ;;
    "restart" )
      restart
      ;;
    "reload" )
      reload
      ;;
    "up" )
      upme
      ;;
    "down" )
      downme
      ;;
    "caddylog" )
      caddylog
      ;;
    "vhostlog" )
      test_requirements multitail
      vhostlog
      ;;
    "cleanup" )
      cleanup
      ;;
    "ps" )
      psme
      ;;
    "list" )
      listme
      ;;
    "index" )
      test_requirements jq
      makeindex
      ;;
    * )
      usage
      ;;
  esac
elif [ $# -eq 2 ]; then
SERVICE="${2}"
#if [[ "${SERVICE}" != "landingpage" ]]; then
  case "$1" in
    "enable" )
      enableme
      ;;
    "disable" )
      disableme
      ;;
    "prepare" )
      buildme
      ;;
    "new" )
      newservice
      ;;
    "logs" )
      logme
      ;;
    "sethome" )
      sethome
    ;;
    "setmail" )
      setmail
      ;;
    * )
      usage
      ;;
  esac
#fi
else
  usage
fi
